name: "OCI Terraform Setup"
description: "Common setup for Terraform and OCI CLI"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip jq unzip
        pip3 install oci-cli==${{ env.OCI_CLI_VERSION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure OCI CLI
      shell: bash
      run: |
        mkdir -p ~/.oci
        echo "${{ env.OCI_PRIVATE_KEY }}" > ${{ env.TF_VAR_private_key_path }}
        chmod 600 ${{ env.TF_VAR_private_key_path }}
        cat > ~/.oci/config <<EOF
        [DEFAULT]
        user=${{ env.TF_VAR_user_ocid }}
        fingerprint=${{ env.TF_VAR_fingerprint }}
        key_file=${{ env.TF_VAR_private_key_path }}
        tenancy=${{ env.TF_VAR_tenancy_ocid }}
        region=${{ env.TF_VAR_region }}
        EOF
        chmod 600 ~/.oci/config

    - name: Get OCI Namespace (for backend)
      id: ns
      shell: bash
      run: |
        echo "ns=$(oci os ns get | jq -r '.data')" >> $GITHUB_OUTPUT

    - name: Terraform Init (optional)
      shell: bash
      run: |
        terraform init \
          -backend-config="bucket=${{ env.OCI_BUCKET_NAME }}" \
          -backend-config="namespace=${{ steps.ns.outputs.ns }}" \
          -backend-config="region=${{ env.TF_VAR_region }}" \
          -backend-config="key=terraform.tfstate"