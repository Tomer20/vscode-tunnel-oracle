name: Deploy Infrastructure

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip jq unzip
        pip3 install oci-cli

    - name: Configure OCI CLI
      env:
        OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.oci
        echo "${OCI_PRIVATE_KEY}" > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem

        cat > ~/.oci/config <<EOF
        [DEFAULT]
        user=${{ secrets.OCI_USER_OCID }}
        fingerprint=${{ secrets.OCI_FINGERPRINT }}
        key_file=~/.oci/oci_api_key.pem
        tenancy=${{ secrets.OCI_TENANCY_OCID }}
        region=${{ secrets.OCI_REGION }}
        EOF

    - name: Generate backend.tf
      run: |
        NS=$(oci os ns get | jq -r '.data')
        COMPARTMENT_ID=$(oci iam compartment list \
          --name "${{ vars.OCI_COMPARTMENT_NAME }}" \
          --compartment-id ${{ secrets.OCI_TENANCY_OCID }} \
          | jq -r '.data[0].id')

        cat > backend.tf <<EOF
        terraform {
          backend "oci" {
            bucket         = "${{ vars.OCI_BUCKET_NAME }}"
            namespace      = "${NS}"
            compartment_id = "${COMPARTMENT_ID}"
            region         = "${{ secrets.OCI_REGION }}"
            key            = "terraform.tfstate"
          }
        }
        EOF

    - name: Initialize Terraform
      run: terraform init

    - name: Validate Terraform
      run: terraform validate

    - name: Plan Terraform
      run: terraform plan -out=tfplan

    - name: Apply Terraform
      run: terraform apply -auto-approve tfplan